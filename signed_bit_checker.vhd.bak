library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity signed_bit_checker is
	generic(N : integer := 10);
	port(
		clk_i, rst_i	: in std_logic;
		A, B : in std_logic_vector(N-1 downto 0);
		Data_mode		: in std_logic_vector(1 downto 0);
		signed_bit		: out std_logic;
	);
	
end entity;

architecture Behave of signed_bit_checker is
	signal Data_A, Data_B : integer := 0;

begin
	process(clk_i, rst_i) is
	begin
		if (rst_i = '0') then
			Data_A <= 0;
			Data_B <= 0;
		elsif (rising_edge(clk_i)) then
			case Data_mode is
				when "00" =>
					if (Data_A >= Data_B) then
						signed_bit <= '0';
					else
						signed_bit <= '1';
					end if;

				when "01" =>
					if (Data_A > Data_B) then
						signed_bit <= '1';
					else
						signed_bit <= '0';
					end if;
							
				when "10" | "11" =>
					if (A xor B) then
						signed_bit <= '1';
					else
						signed_bit <= '0';
					end if;
				
				when others => signed_bit <= '0';
			end case;
		end if
	end process;
end Behave;